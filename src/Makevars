OBJECTS=RcppExports.o mob.o infection.o \
	test-runner.o test-roaring.o test-infection.o test-roaring-gpu.o

PKG_LIBS=-lcudart
PKG_CXXFLAGS=-I../inst/include

# We assume the nvidia-toolkit is available in the environment.
# TODO: Use CUDA_PATH to find nvcc, if available
# TODO: handle NDEBUG / optimization flags.

NVCC=nvcc
NVCCFLAGS=-Xcompiler -fPIC -arch=sm_86 --extended-lambda -Xcompiler -fdiagnostics-color=always -I../inst/include

# The R build system picks up the first target defined. Usually its own
# makefiles set that as $(SHLIB) already, but because we define new targets we
# don't want these to risk going first.
all: $(SHLIB)

# Add a rule to compile our Cuda files. The R build system has all kinds of
# these rules for C/C++/Obj-C/Fortran already.
%.o: %.cu
	$(NVCC) $(ALL_CPPFLAGS) $(NVCCFLAGS) -c $< -o $@

# We have some external C++ dependencies we use in our tests. Both of those are
# built using CMake and installed into the `.libs` directory. Our PKG_CPPFLAGS
# and PKG_LIBS variables reference that directory.
#
# These exist as ready-built Ubuntu packages, but unfortunately those are not
# built as position-independent code (`-fPIC`). This is usually fine for static
# linking into test executables, but we actually need to build our tests as a
# shared library that R can dlopen. These requires all of our code to be
# position-independent.
#
# As a final catch (pun not intended), rapidcheck defines - but does not
# install - its own copy of Catch2. This causes issues if we import both
# RapidCheck and Catch2 in the same CMake build. Two avoid that, we have two
# separate CMakeLists.txt files, in two separate directories, and we run two
# separate builds.
#
# At some point we might as well consider building the whole package with CMake.
#
# TODO: pass CMAKE_BUILD_TYPE as appropriate, possibly also other variables
# (CC/CXX/CFLAGS/...)
install-dep-%:
	cmake \
		-DCMAKE_INSTALL_PREFIX=$(PWD)/.libs \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
		-DCMAKE_BUILD_TYPE=Release \
		-S cmake/$* \
		-B .deps/$*

	cmake --build .deps/$*
	cmake --install .deps/$*

install-deps: install-dep-catch2 install-dep-rapidcheck

PKG_CPPFLAGS=-I$(PWD)/.libs/include
PKG_LIBS+=-L$(PWD)/.libs/lib -lCatch2 -lrapidcheck

$(OBJECTS): install-deps

.PHONY: install-deps

PKG_CXXFLAGS+=-fmax-errors=1
