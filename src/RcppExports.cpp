// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "mob_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// device_random_create
Rcpp::XPtr<RSystem::random> device_random_create(size_t size, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_device_random_create(SEXP sizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(device_random_create(size, seed));
    return rcpp_result_gen;
END_RCPP
}
// parallel_runif
Rcpp::NumericVector parallel_runif(Rcpp::XPtr<RSystem::random> rngs, size_t n, double min, double max);
RcppExport SEXP _mob_parallel_runif(SEXP rngsSEXP, SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RSystem::random> >::type rngs(rngsSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_runif(rngs, n, min, max));
    return rcpp_result_gen;
END_RCPP
}
// parallel_rbinom
Rcpp::NumericVector parallel_rbinom(Rcpp::XPtr<RSystem::random> rngs, size_t n, size_t size, double prob);
RcppExport SEXP _mob_parallel_rbinom(SEXP rngsSEXP, SEXP nSEXP, SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RSystem::random> >::type rngs(rngsSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_rbinom(rngs, n, size, prob));
    return rcpp_result_gen;
END_RCPP
}
// homogeneous_infection_process_wrapper
Rcpp::DataFrame homogeneous_infection_process_wrapper(Rcpp::XPtr<RSystem::random> rngs, Rcpp::IntegerVector susceptible, Rcpp::IntegerVector infected, double infection_probability);
RcppExport SEXP _mob_homogeneous_infection_process_wrapper(SEXP rngsSEXP, SEXP susceptibleSEXP, SEXP infectedSEXP, SEXP infection_probabilitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RSystem::random> >::type rngs(rngsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type susceptible(susceptibleSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type infected(infectedSEXP);
    Rcpp::traits::input_parameter< double >::type infection_probability(infection_probabilitySEXP);
    rcpp_result_gen = Rcpp::wrap(homogeneous_infection_process_wrapper(rngs, susceptible, infected, infection_probability));
    return rcpp_result_gen;
END_RCPP
}
// create_partition
Rcpp::XPtr<mob::ds::partition<RSystem>> create_partition(std::vector<uint32_t> population);
RcppExport SEXP _mob_create_partition(SEXP populationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<uint32_t> >::type population(populationSEXP);
    rcpp_result_gen = Rcpp::wrap(create_partition(population));
    return rcpp_result_gen;
END_RCPP
}
// household_infection_process_wrapper
Rcpp::DataFrame household_infection_process_wrapper(Rcpp::XPtr<RSystem::random> rngs, Rcpp::IntegerVector susceptible, Rcpp::IntegerVector infected, Rcpp::XPtr<mob::ds::partition<RSystem>> households, Rcpp::DoubleVector infection_probability);
RcppExport SEXP _mob_household_infection_process_wrapper(SEXP rngsSEXP, SEXP susceptibleSEXP, SEXP infectedSEXP, SEXP householdsSEXP, SEXP infection_probabilitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RSystem::random> >::type rngs(rngsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type susceptible(susceptibleSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type infected(infectedSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<mob::ds::partition<RSystem>> >::type households(householdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type infection_probability(infection_probabilitySEXP);
    rcpp_result_gen = Rcpp::wrap(household_infection_process_wrapper(rngs, susceptible, infected, households, infection_probability));
    return rcpp_result_gen;
END_RCPP
}
// betabinomial_sampler_wrapper
Rcpp::NumericVector betabinomial_sampler_wrapper(Rcpp::NumericVector data, size_t k, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_betabinomial_sampler_wrapper(SEXP dataSEXP, SEXP kSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(betabinomial_sampler_wrapper(data, k, seed));
    return rcpp_result_gen;
END_RCPP
}
// selection_sampler_wrapper
Rcpp::NumericVector selection_sampler_wrapper(Rcpp::NumericVector data, size_t k, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_selection_sampler_wrapper(SEXP dataSEXP, SEXP kSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(selection_sampler_wrapper(data, k, seed));
    return rcpp_result_gen;
END_RCPP
}
// bernouilli_sampler_wrapper
std::vector<double> bernouilli_sampler_wrapper(Rcpp::NumericVector data, double p, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_bernouilli_sampler_wrapper(SEXP dataSEXP, SEXP pSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bernouilli_sampler_wrapper(data, p, seed));
    return rcpp_result_gen;
END_RCPP
}
// bernouilli_sampler_count_wrapper
size_t bernouilli_sampler_count_wrapper(size_t n, double p, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_bernouilli_sampler_count_wrapper(SEXP nSEXP, SEXP pSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bernouilli_sampler_count_wrapper(n, p, seed));
    return rcpp_result_gen;
END_RCPP
}
// bernouilli_sampler_gpu_wrapper
Rcpp::NumericVector bernouilli_sampler_gpu_wrapper(Rcpp::NumericVector data, double p, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_bernouilli_sampler_gpu_wrapper(SEXP dataSEXP, SEXP pSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bernouilli_sampler_gpu_wrapper(data, p, seed));
    return rcpp_result_gen;
END_RCPP
}
// bernouilli_sampler_count_gpu_wrapper
size_t bernouilli_sampler_count_gpu_wrapper(size_t n, double p, Rcpp::Nullable<Rcpp::NumericVector> seed);
RcppExport SEXP _mob_bernouilli_sampler_count_gpu_wrapper(SEXP nSEXP, SEXP pSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bernouilli_sampler_count_gpu_wrapper(n, p, seed));
    return rcpp_result_gen;
END_RCPP
}
// run_catch
bool run_catch(Rcpp::Nullable<Rcpp::StringVector> args, bool fork);
RcppExport SEXP _mob_run_catch(SEXP argsSEXP, SEXP forkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::StringVector> >::type args(argsSEXP);
    Rcpp::traits::input_parameter< bool >::type fork(forkSEXP);
    rcpp_result_gen = Rcpp::wrap(run_catch(args, fork));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mob_device_random_create", (DL_FUNC) &_mob_device_random_create, 2},
    {"_mob_parallel_runif", (DL_FUNC) &_mob_parallel_runif, 4},
    {"_mob_parallel_rbinom", (DL_FUNC) &_mob_parallel_rbinom, 4},
    {"_mob_homogeneous_infection_process_wrapper", (DL_FUNC) &_mob_homogeneous_infection_process_wrapper, 4},
    {"_mob_create_partition", (DL_FUNC) &_mob_create_partition, 1},
    {"_mob_household_infection_process_wrapper", (DL_FUNC) &_mob_household_infection_process_wrapper, 5},
    {"_mob_betabinomial_sampler_wrapper", (DL_FUNC) &_mob_betabinomial_sampler_wrapper, 3},
    {"_mob_selection_sampler_wrapper", (DL_FUNC) &_mob_selection_sampler_wrapper, 3},
    {"_mob_bernouilli_sampler_wrapper", (DL_FUNC) &_mob_bernouilli_sampler_wrapper, 3},
    {"_mob_bernouilli_sampler_count_wrapper", (DL_FUNC) &_mob_bernouilli_sampler_count_wrapper, 3},
    {"_mob_bernouilli_sampler_gpu_wrapper", (DL_FUNC) &_mob_bernouilli_sampler_gpu_wrapper, 3},
    {"_mob_bernouilli_sampler_count_gpu_wrapper", (DL_FUNC) &_mob_bernouilli_sampler_count_gpu_wrapper, 3},
    {"_mob_run_catch", (DL_FUNC) &_mob_run_catch, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mob(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
